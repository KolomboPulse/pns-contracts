{
  "address": "0x77fBAf19b2cb144297f91230C7d500A2c6Ebc850",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_fetchAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PriceOutdated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "fetch",
      "outputs": [
        {
          "internalType": "contract IFetch",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_queryId",
          "type": "bytes32"
        }
      ],
      "name": "getCurrentValue",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_ifRetrieve",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_value",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_timestampRetrieved",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_queryId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getDataAfter",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "_value",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_timestampRetrieved",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_queryId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getDataBefore",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "_value",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_timestampRetrieved",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_queryId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getIndexForDataAfter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_found",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_queryId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getIndexForDataBefore",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_found",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_queryId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxAge",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxCount",
          "type": "uint256"
        }
      ],
      "name": "getMultipleValuesBefore",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "_values",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_timestamps",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_queryId",
          "type": "bytes32"
        }
      ],
      "name": "getNewValueCountbyQueryId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_queryId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getReporterByTimestamp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_queryId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getTimestampbyQueryIdandIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_queryId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "retrieveData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x70ee61b121342b3e46762ff062f5758df33ec2db7a19c2a5c94da3a59313fe2c",
  "receipt": {
    "to": null,
    "from": "0xAa4aBea758bd88E7F778EbEd7b9D225f9877Ec4C",
    "contractAddress": "0x77fBAf19b2cb144297f91230C7d500A2c6Ebc850",
    "transactionIndex": 1,
    "gasUsed": "1097978",
    "logsBloom": "0x
    "blockHash": "0x8f58ba32be3fe4de648953932cb56d53eca89410399a80041609fcc3e19c7698",
    "transactionHash": "0x70ee61b121342b3e46762ff062f5758df33ec2db7a19c2a5c94da3a59313fe2c",
    "logs": [],
    "blockNumber": 16873916,
    "cumulativeGasUsed": "1316405",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x20763435F23a727CD8748CE5d80a0b9F9c886110"
  ],
  "numDeployments": 1,
  "solcInputHash": "f2c2f1c49fdf5b035ba4d94ee2211996",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_fetchAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PriceOutdated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"fetch\",\"outputs\":[{\"internalType\":\"contract IFetch\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"}],\"name\":\"getCurrentValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_ifRetrieve\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_value\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_timestampRetrieved\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getDataAfter\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"_value\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_timestampRetrieved\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getDataBefore\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"_value\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_timestampRetrieved\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getIndexForDataAfter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_found\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getIndexForDataBefore\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_found\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxCount\",\"type\":\"uint256\"}],\"name\":\"getMultipleValuesBefore\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_values\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_timestamps\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"}],\"name\":\"getNewValueCountbyQueryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getReporterByTimestamp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTimestampbyQueryIdandIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"retrieveData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getCurrentValue(bytes32)\":{\"details\":\"Allows the user to get the latest value for the queryId specified\",\"params\":{\"_queryId\":\"is the id to look up the value for\"},\"returns\":{\"_ifRetrieve\":\"bool true if non-zero value successfully retrieved\",\"_timestampRetrieved\":\"the retrieved value's timestamp\",\"_value\":\"the value retrieved\"}},\"getDataAfter(bytes32,uint256)\":{\"details\":\"Retrieves the next value for the queryId after the specified timestamp\",\"params\":{\"_queryId\":\"is the queryId to look up the value for\",\"_timestamp\":\"after which to search for next value\"},\"returns\":{\"_timestampRetrieved\":\"the value's timestamp\",\"_value\":\"the value retrieved\"}},\"getDataBefore(bytes32,uint256)\":{\"details\":\"Retrieves the latest value for the queryId before the specified timestamp\",\"params\":{\"_queryId\":\"is the queryId to look up the value for\",\"_timestamp\":\"before which to search for latest value\"},\"returns\":{\"_timestampRetrieved\":\"the value's timestamp\",\"_value\":\"the value retrieved\"}},\"getIndexForDataAfter(bytes32,uint256)\":{\"details\":\"Retrieves next array index of data after the specified timestamp for the queryId\",\"params\":{\"_queryId\":\"is the queryId to look up the index for\",\"_timestamp\":\"is the timestamp after which to search for the next index\"},\"returns\":{\"_found\":\"whether the index was found\",\"_index\":\"the next index found after the specified timestamp\"}},\"getIndexForDataBefore(bytes32,uint256)\":{\"details\":\"Retrieves latest array index of data before the specified timestamp for the queryId\",\"params\":{\"_queryId\":\"is the queryId to look up the index for\",\"_timestamp\":\"is the timestamp before which to search for the latest index\"},\"returns\":{\"_found\":\"whether the index was found\",\"_index\":\"the latest index found before the specified timestamp\"}},\"getMultipleValuesBefore(bytes32,uint256,uint256,uint256)\":{\"details\":\"Retrieves multiple uint256 values before the specified timestamp\",\"params\":{\"_maxAge\":\"the maximum number of seconds before the _timestamp to search for values\",\"_maxCount\":\"the maximum number of values to return\",\"_queryId\":\"the unique id of the data query\",\"_timestamp\":\"the timestamp before which to search for values\"},\"returns\":{\"_timestamps\":\"the timestamps of the values retrieved\",\"_values\":\"the values retrieved, ordered from oldest to newest\"}},\"getNewValueCountbyQueryId(bytes32)\":{\"details\":\"Counts the number of values that have been submitted for the queryId\",\"params\":{\"_queryId\":\"the id to look up\"},\"returns\":{\"_0\":\"uint256 count of the number of values received for the queryId\"}},\"getReporterByTimestamp(bytes32,uint256)\":{\"details\":\"Returns the address of the reporter who submitted a value for a data ID at a specific time\",\"params\":{\"_queryId\":\"is ID of the specific data feed\",\"_timestamp\":\"is the timestamp to find a corresponding reporter for\"},\"returns\":{\"_0\":\"address of the reporter who reported the value for the data ID at the given timestamp\"}},\"getTimestampbyQueryIdandIndex(bytes32,uint256)\":{\"details\":\"Gets the timestamp for the value based on their index\",\"params\":{\"_index\":\"is the value index to look up\",\"_queryId\":\"is the id to look up\"},\"returns\":{\"_0\":\"uint256 timestamp\"}},\"retrieveData(bytes32,uint256)\":{\"details\":\"Retrieve value from oracle based on queryId/timestamp\",\"params\":{\"_queryId\":\"being requested\",\"_timestamp\":\"to retrieve data/value from\"},\"returns\":{\"_0\":\"bytes value for query/timestamp submitted\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/fetchflex-oracle/FetchFlexOracle.sol\":\"FetchFlexOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"contracts/fetchflex-oracle/FetchFlexOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport {UsingFetch} from \\\"./UsingFetch.sol\\\";\\n\\nerror PriceOutdated();\\n\\ncontract FetchFlexOracle is UsingFetch {\\n    constructor(address payable _fetchAddress) UsingFetch(_fetchAddress) {}\\n\\n    function latestAnswer() public view returns (int256) {\\n        bytes memory _queryData = abi.encode(\\\"SpotPrice\\\", abi.encode(\\\"pls\\\", \\\"usd\\\"));\\n        bytes32 _queryId = keccak256(_queryData);\\n\\n        (bytes memory _value, uint256 _timestampRetrieved) = getDataBefore(_queryId, block.timestamp - 20 minutes);\\n        if (block.timestamp - _timestampRetrieved > 24 hours) {\\n            revert PriceOutdated();\\n        }\\n\\n        uint256 price = abi.decode(_value, (uint256));\\n        // convert value to chainlink oracle format\\n        return int256(price * 1e8 / 1e18);\\n    }\\n}\",\"keccak256\":\"0xad6d1e13a8e9bad0d1dcae4b25762f9365960139f49705940afd10991d3c0426\",\"license\":\"MIT\"},\"contracts/fetchflex-oracle/IFetch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IFetch {\\n    //Controller\\n    function addresses(bytes32) external view returns (address);\\n\\n    function uints(bytes32) external view returns (uint256);\\n\\n    function burn(uint256 _amount) external;\\n\\n    function changeDeity(address _newDeity) external;\\n\\n    function changeOwner(address _newOwner) external;\\n\\n    function changeFetchContract(address _tContract) external;\\n\\n    function changeControllerContract(address _newController) external;\\n\\n    function changeGovernanceContract(address _newGovernance) external;\\n\\n    function changeOracleContract(address _newOracle) external;\\n\\n    function changeTreasuryContract(address _newTreasury) external;\\n\\n    function changeUint(bytes32 _target, uint256 _amount) external;\\n\\n    function migrate() external;\\n\\n    function mint(address _reciever, uint256 _amount) external;\\n\\n    function init() external;\\n\\n    function getAllDisputeVars(\\n        uint256 _disputeId\\n    )\\n        external\\n        view\\n        returns (\\n            bytes32,\\n            bool,\\n            bool,\\n            bool,\\n            address,\\n            address,\\n            address,\\n            uint256[9] memory,\\n            int256\\n        );\\n\\n    function getDisputeIdByDisputeHash(\\n        bytes32 _hash\\n    ) external view returns (uint256);\\n\\n    function getDisputeUintVars(\\n        uint256 _disputeId,\\n        bytes32 _data\\n    ) external view returns (uint256);\\n\\n    function getLastNewValueById(\\n        uint256 _requestId\\n    ) external view returns (uint256, bool);\\n\\n    function retrieveData(\\n        uint256 _requestId,\\n        uint256 _timestamp\\n    ) external view returns (uint256);\\n\\n    function getNewValueCountbyRequestId(\\n        uint256 _requestId\\n    ) external view returns (uint256);\\n\\n    function getAddressVars(bytes32 _data) external view returns (address);\\n\\n    function getUintVar(bytes32 _data) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function isMigrated(address _addy) external view returns (bool);\\n\\n    function allowance(\\n        address _user,\\n        address _spender\\n    ) external view returns (uint256);\\n\\n    function allowedToTrade(\\n        address _user,\\n        uint256 _amount\\n    ) external view returns (bool);\\n\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\n\\n    function approveAndTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external returns (bool);\\n\\n    function balanceOf(address _user) external view returns (uint256);\\n\\n    function balanceOfAt(\\n        address _user,\\n        uint256 _blockNumber\\n    ) external view returns (uint256);\\n\\n    function transfer(\\n        address _to,\\n        uint256 _amount\\n    ) external returns (bool success);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external returns (bool success);\\n\\n    function depositStake() external;\\n\\n    function requestStakingWithdraw() external;\\n\\n    function withdrawStake() external;\\n\\n    function changeStakingStatus(address _reporter, uint _status) external;\\n\\n    function slashReporter(address _reporter, address _disputer) external;\\n\\n    function getStakerInfo(\\n        address _staker\\n    ) external view returns (uint256, uint256);\\n\\n    function getTimestampbyRequestIDandIndex(\\n        uint256 _requestId,\\n        uint256 _index\\n    ) external view returns (uint256);\\n\\n    function getNewCurrentVariables()\\n        external\\n        view\\n        returns (bytes32 _c, uint256[5] memory _r, uint256 _d, uint256 _t);\\n\\n    function getNewValueCountbyQueryId(\\n        bytes32 _queryId\\n    ) external view returns (uint256);\\n\\n    function getTimestampbyQueryIdandIndex(\\n        bytes32 _queryId,\\n        uint256 _index\\n    ) external view returns (uint256);\\n\\n    function retrieveData(\\n        bytes32 _queryId,\\n        uint256 _timestamp\\n    ) external view returns (bytes memory);\\n\\n    //Governance\\n    enum VoteResult {\\n        FAILED,\\n        PASSED,\\n        INVALID\\n    }\\n\\n    function setApprovedFunction(bytes4 _func, bool _val) external;\\n\\n    function beginDispute(bytes32 _queryId, uint256 _timestamp) external;\\n\\n    function delegate(address _delegate) external;\\n\\n    function delegateOfAt(\\n        address _user,\\n        uint256 _blockNumber\\n    ) external view returns (address);\\n\\n    function executeVote(uint256 _disputeId) external;\\n\\n    function proposeVote(\\n        address _contract,\\n        bytes4 _function,\\n        bytes calldata _data,\\n        uint256 _timestamp\\n    ) external;\\n\\n    function tallyVotes(uint256 _disputeId) external;\\n\\n    function updateMinDisputeFee() external;\\n\\n    function verify() external pure returns (uint);\\n\\n    function vote(\\n        uint256 _disputeId,\\n        bool _supports,\\n        bool _invalidQuery\\n    ) external;\\n\\n    function voteFor(\\n        address[] calldata _addys,\\n        uint256 _disputeId,\\n        bool _supports,\\n        bool _invalidQuery\\n    ) external;\\n\\n    function getDelegateInfo(\\n        address _holder\\n    ) external view returns (address, uint);\\n\\n    function isFunctionApproved(bytes4 _func) external view returns (bool);\\n\\n    function isApprovedGovernanceContract(\\n        address _contract\\n    ) external returns (bool);\\n\\n    function getVoteRounds(\\n        bytes32 _hash\\n    ) external view returns (uint256[] memory);\\n\\n    function getVoteCount() external view returns (uint256);\\n\\n    function getVoteInfo(\\n        uint256 _disputeId\\n    )\\n        external\\n        view\\n        returns (\\n            bytes32,\\n            uint256[9] memory,\\n            bool[2] memory,\\n            VoteResult,\\n            bytes memory,\\n            bytes4,\\n            address[2] memory\\n        );\\n\\n    function getDisputeInfo(\\n        uint256 _disputeId\\n    ) external view returns (uint256, uint256, bytes memory, address);\\n\\n    function getOpenDisputesOnId(\\n        bytes32 _queryId\\n    ) external view returns (uint256);\\n\\n    function didVote(\\n        uint256 _disputeId,\\n        address _voter\\n    ) external view returns (bool);\\n\\n    //Oracle\\n    function getReportTimestampByIndex(\\n        bytes32 _queryId,\\n        uint256 _index\\n    ) external view returns (uint256);\\n\\n    function getValueByTimestamp(\\n        bytes32 _queryId,\\n        uint256 _timestamp\\n    ) external view returns (bytes memory);\\n\\n    function getBlockNumberByTimestamp(\\n        bytes32 _queryId,\\n        uint256 _timestamp\\n    ) external view returns (uint256);\\n\\n    function getReportingLock() external view returns (uint256);\\n\\n    function getReporterByTimestamp(\\n        bytes32 _queryId,\\n        uint256 _timestamp\\n    ) external view returns (address);\\n\\n    function reportingLock() external view returns (uint256);\\n\\n    function removeValue(bytes32 _queryId, uint256 _timestamp) external;\\n\\n    function getReportsSubmittedByAddress(\\n        address _reporter\\n    ) external view returns (uint256);\\n\\n    function getTipsByUser(address _user) external view returns (uint256);\\n\\n    function tipQuery(\\n        bytes32 _queryId,\\n        uint256 _tip,\\n        bytes memory _queryData\\n    ) external;\\n\\n    function submitValue(\\n        bytes32 _queryId,\\n        bytes calldata _value,\\n        uint256 _nonce,\\n        bytes memory _queryData\\n    ) external;\\n\\n    function burnTips() external;\\n\\n    function changeReportingLock(uint256 _newReportingLock) external;\\n\\n    function changeTimeBasedReward(uint256 _newTimeBasedReward) external;\\n\\n    function getReporterLastTimestamp(\\n        address _reporter\\n    ) external view returns (uint256);\\n\\n    function getTipsById(bytes32 _queryId) external view returns (uint256);\\n\\n    function getTimeBasedReward() external view returns (uint256);\\n\\n    function getTimestampCountById(\\n        bytes32 _queryId\\n    ) external view returns (uint256);\\n\\n    function getTimestampIndexByTimestamp(\\n        bytes32 _queryId,\\n        uint256 _timestamp\\n    ) external view returns (uint256);\\n\\n    function getCurrentReward(\\n        bytes32 _queryId\\n    ) external view returns (uint256, uint256);\\n\\n    function getCurrentValue(\\n        bytes32 _queryId\\n    ) external view returns (bytes memory);\\n\\n    function getDataBefore(\\n        bytes32 _queryId,\\n        uint256 _timestamp\\n    )\\n        external\\n        view\\n        returns (\\n            bool _ifRetrieve,\\n            bytes memory _value,\\n            uint256 _timestampRetrieved\\n        );\\n\\n    function getTimeOfLastNewValue() external view returns (uint256);\\n\\n    function getIndexForDataBefore(\\n        bytes32 _queryId,\\n        uint256 _timestamp\\n    ) external view returns (bool _found, uint256 _index);\\n\\n    //Treasury\\n    function issueTreasury(\\n        uint256 _maxAmount,\\n        uint256 _rate,\\n        uint256 _duration\\n    ) external;\\n\\n    function payTreasury(address _investor, uint256 _id) external;\\n\\n    function buyTreasury(uint256 _id, uint256 _amount) external;\\n\\n    function getTreasuryDetails(\\n        uint256 _id\\n    ) external view returns (uint256, uint256, uint256, uint256);\\n\\n    function getTreasuryFundsByUser(\\n        address _user\\n    ) external view returns (uint256);\\n\\n    function getTreasuryAccount(\\n        uint256 _id,\\n        address _investor\\n    ) external view returns (uint256, uint256, bool);\\n\\n    function getTreasuryCount() external view returns (uint256);\\n\\n    function getTreasuryOwners(\\n        uint256 _id\\n    ) external view returns (address[] memory);\\n\\n    function wasPaid(\\n        uint256 _id,\\n        address _investor\\n    ) external view returns (bool);\\n\\n    //Test functions\\n    function changeAddressVar(bytes32 _id, address _addy) external;\\n\\n    //parachute functions\\n    function killContract() external;\\n\\n    function migrateFor(address _destination, uint256 _amount) external;\\n\\n    function rescue51PercentAttack(address _tokenHolder) external;\\n\\n    function rescueBrokenDataReporting() external;\\n\\n    function rescueFailedUpdate() external;\\n}\",\"keccak256\":\"0x7073d39c9c9e04f52d489c1ed5ebbcf1a0cdbd0a7af3bdb3a50072ba46436fe2\",\"license\":\"MIT\"},\"contracts/fetchflex-oracle/UsingFetch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IFetch.sol\\\";\\n\\n/**\\n * @title UserContract\\n * This contract allows for easy integration with the Fetch System\\n * by helping smart contracts to read data from Fetch\\n */\\ncontract UsingFetch {\\n    IFetch public fetch;\\n\\n    /*Constructor*/\\n    /**\\n     * @dev the constructor sets the fetch address in storage\\n     * @param _fetch is the FetchMaster address\\n     */\\n    constructor(address payable _fetch) {\\n        fetch = IFetch(_fetch);\\n    }\\n\\n    /*Getters*/\\n    /**\\n     * @dev Retrieves the next value for the queryId after the specified timestamp\\n     * @param _queryId is the queryId to look up the value for\\n     * @param _timestamp after which to search for next value\\n     * @return _value the value retrieved\\n     * @return _timestampRetrieved the value's timestamp\\n     */\\n    function getDataAfter(\\n        bytes32 _queryId,\\n        uint256 _timestamp\\n    ) public view returns (bytes memory _value, uint256 _timestampRetrieved) {\\n        (bool _found, uint256 _index) = getIndexForDataAfter(\\n            _queryId,\\n            _timestamp\\n        );\\n        if (!_found) {\\n            return (\\\"\\\", 0);\\n        }\\n        _timestampRetrieved = getTimestampbyQueryIdandIndex(_queryId, _index);\\n        _value = retrieveData(_queryId, _timestampRetrieved);\\n        return (_value, _timestampRetrieved);\\n    }\\n\\n    /**\\n     * @dev Retrieves the latest value for the queryId before the specified timestamp\\n     * @param _queryId is the queryId to look up the value for\\n     * @param _timestamp before which to search for latest value\\n     * @return _value the value retrieved\\n     * @return _timestampRetrieved the value's timestamp\\n     */\\n    function getDataBefore(\\n        bytes32 _queryId,\\n        uint256 _timestamp\\n    ) public view returns (bytes memory _value, uint256 _timestampRetrieved) {\\n        (bool _found, uint256 _index) = getIndexForDataBefore(\\n            _queryId,\\n            _timestamp\\n        );\\n        if (!_found) return (bytes(\\\"\\\"), 0);\\n        uint256 _time = fetch.getTimestampbyQueryIdandIndex(_queryId, _index);\\n        _value = fetch.retrieveData(_queryId, _time);\\n        if (keccak256(_value) != keccak256(bytes(\\\"\\\"))) return (_value, _time);\\n        return (bytes(\\\"\\\"), 0);\\n    }\\n\\n    /**\\n     * @dev Retrieves next array index of data after the specified timestamp for the queryId\\n     * @param _queryId is the queryId to look up the index for\\n     * @param _timestamp is the timestamp after which to search for the next index\\n     * @return _found whether the index was found\\n     * @return _index the next index found after the specified timestamp\\n     */\\n    function getIndexForDataAfter(\\n        bytes32 _queryId,\\n        uint256 _timestamp\\n    ) public view returns (bool _found, uint256 _index) {\\n        (_found, _index) = fetch.getIndexForDataBefore(_queryId, _timestamp);\\n        if (_found) {\\n            _index++;\\n        }\\n        uint256 _valCount = fetch.getNewValueCountbyQueryId(_queryId);\\n        // no value after timestamp\\n        if (_valCount <= _index) {\\n            return (false, 0);\\n        }\\n        uint256 _timestampRetrieved = fetch.getTimestampbyQueryIdandIndex(\\n            _queryId,\\n            _index\\n        );\\n        if (_timestampRetrieved > _timestamp) {\\n            return (true, _index);\\n        }\\n        // if _timestampRetrieved equals _timestamp, try next value\\n        _index++;\\n        // no value after timestamp\\n        if (_valCount <= _index) {\\n            return (false, 0);\\n        }\\n        _timestampRetrieved = fetch.getTimestampbyQueryIdandIndex(\\n            _queryId,\\n            _index\\n        );\\n        return (true, _index);\\n    }\\n\\n    /**\\n     * @dev Retrieves latest array index of data before the specified timestamp for the queryId\\n     * @param _queryId is the queryId to look up the index for\\n     * @param _timestamp is the timestamp before which to search for the latest index\\n     * @return _found whether the index was found\\n     * @return _index the latest index found before the specified timestamp\\n     */\\n    // slither-disable-next-line calls-loop\\n    function getIndexForDataBefore(\\n        bytes32 _queryId,\\n        uint256 _timestamp\\n    ) public view returns (bool _found, uint256 _index) {\\n        return fetch.getIndexForDataBefore(_queryId, _timestamp);\\n    }\\n\\n    /**\\n     * @dev Retrieves multiple uint256 values before the specified timestamp\\n     * @param _queryId the unique id of the data query\\n     * @param _timestamp the timestamp before which to search for values\\n     * @param _maxAge the maximum number of seconds before the _timestamp to search for values\\n     * @param _maxCount the maximum number of values to return\\n     * @return _values the values retrieved, ordered from oldest to newest\\n     * @return _timestamps the timestamps of the values retrieved\\n     */\\n    function getMultipleValuesBefore(\\n        bytes32 _queryId,\\n        uint256 _timestamp,\\n        uint256 _maxAge,\\n        uint256 _maxCount\\n    )\\n        public\\n        view\\n        returns (bytes[] memory _values, uint256[] memory _timestamps)\\n    {\\n        (bool _ifRetrieve, uint256 _startIndex) = getIndexForDataAfter(\\n            _queryId,\\n            _timestamp - _maxAge\\n        );\\n        // no value within range\\n        if (!_ifRetrieve) {\\n            return (new bytes[](0), new uint256[](0));\\n        }\\n        uint256 _endIndex;\\n        (_ifRetrieve, _endIndex) = getIndexForDataBefore(_queryId, _timestamp);\\n        // no value before _timestamp\\n        if (!_ifRetrieve) {\\n            return (new bytes[](0), new uint256[](0));\\n        }\\n        uint256 _valCount = _endIndex - _startIndex + 1;\\n        // more than _maxCount values found within range\\n        if (_valCount > _maxCount) {\\n            _startIndex = _endIndex - _maxCount + 1;\\n            _valCount = _maxCount;\\n        }\\n        bytes[] memory _valuesArray = new bytes[](_valCount);\\n        uint256[] memory _timestampsArray = new uint256[](_valCount);\\n        bytes memory _valueRetrieved;\\n        for (uint256 _i = 0; _i < _valCount; _i++) {\\n            _timestampsArray[_i] = getTimestampbyQueryIdandIndex(\\n                _queryId,\\n                (_startIndex + _i)\\n            );\\n            _valueRetrieved = retrieveData(_queryId, _timestampsArray[_i]);\\n            _valuesArray[_i] = _valueRetrieved;\\n        }\\n        return (_valuesArray, _timestampsArray);\\n    }\\n\\n    /**\\n     * @dev Counts the number of values that have been submitted for the queryId\\n     * @param _queryId the id to look up\\n     * @return uint256 count of the number of values received for the queryId\\n     */\\n    function getNewValueCountbyQueryId(\\n        bytes32 _queryId\\n    ) public view returns (uint256) {\\n        return fetch.getNewValueCountbyQueryId(_queryId);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the reporter who submitted a value for a data ID at a specific time\\n     * @param _queryId is ID of the specific data feed\\n     * @param _timestamp is the timestamp to find a corresponding reporter for\\n     * @return address of the reporter who reported the value for the data ID at the given timestamp\\n     */\\n    function getReporterByTimestamp(\\n        bytes32 _queryId,\\n        uint256 _timestamp\\n    ) public view returns (address) {\\n        return fetch.getReporterByTimestamp(_queryId, _timestamp);\\n    }\\n\\n    /**\\n     * @dev Gets the timestamp for the value based on their index\\n     * @param _queryId is the id to look up\\n     * @param _index is the value index to look up\\n     * @return uint256 timestamp\\n     */\\n    function getTimestampbyQueryIdandIndex(\\n        bytes32 _queryId,\\n        uint256 _index\\n    ) public view returns (uint256) {\\n        return fetch.getTimestampbyQueryIdandIndex(_queryId, _index);\\n    }\\n\\n    /**\\n     * @dev Retrieve value from oracle based on queryId/timestamp\\n     * @param _queryId being requested\\n     * @param _timestamp to retrieve data/value from\\n     * @return bytes value for query/timestamp submitted\\n     */\\n    function retrieveData(\\n        bytes32 _queryId,\\n        uint256 _timestamp\\n    ) public view returns (bytes memory) {\\n        return fetch.retrieveData(_queryId, _timestamp);\\n    }\\n\\n    /**\\n     * @dev Allows the user to get the latest value for the queryId specified\\n     * @param _queryId is the id to look up the value for\\n     * @return _ifRetrieve bool true if non-zero value successfully retrieved\\n     * @return _value the value retrieved\\n     * @return _timestampRetrieved the retrieved value's timestamp\\n     */\\n    function getCurrentValue(\\n        bytes32 _queryId\\n    )\\n        public\\n        view\\n        returns (\\n            bool _ifRetrieve,\\n            bytes memory _value,\\n            uint256 _timestampRetrieved\\n        )\\n    {\\n        uint256 _count = fetch.getNewValueCountbyQueryId(_queryId);\\n        if (_count == 0) {\\n            return (false, bytes(\\\"\\\"), 0);\\n        }\\n        uint256 _time = fetch.getTimestampbyQueryIdandIndex(\\n            _queryId,\\n            _count - 1\\n        );\\n        _value = fetch.retrieveData(_queryId, _time);\\n        if (keccak256(_value) != keccak256(bytes(\\\"\\\")))\\n            return (true, _value, _time);\\n        return (false, bytes(\\\"\\\"), _time);\\n    }\\n}\",\"keccak256\":\"0x7100e51a4294d03cf91bda62005c23a21492bfb60adea1ecaaee419033f64b74\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161131138038061131183398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b61127e806100936000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c8063adf1639d11610081578063e07c54861161005b578063e07c5486146101e5578063f66f49c3146101f8578063fcd4a5461461020b57600080fd5b8063adf1639d14610190578063c5958af9146101b2578063ce5e11bf146101d257600080fd5b806377b03e0d116100b257806377b03e0d1461013f578063a792765f14610152578063a95c372d1461016557600080fd5b806329449085146100d957806350d25bcd1461010857806364ee3c6d1461011e575b600080fd5b6100ec6100e7366004610e6d565b61022c565b6040805192151583526020830191909152015b60405180910390f35b6101106102ac565b6040519081526020016100ff565b61013161012c366004610e6d565b6103fc565b6040516100ff929190610edf565b61011061014d366004610f01565b610455565b610131610160366004610e6d565b6104c9565b600054610178906001600160a01b031681565b6040516001600160a01b0390911681526020016100ff565b6101a361019e366004610f01565b610657565b6040516100ff93929190610f1a565b6101c56101c0366004610e6d565b61086f565b6040516100ff9190610f45565b6101106101e0366004610e6d565b6108ef565b6101786101f3366004610e6d565b610964565b6100ec610206366004610e6d565b6109f2565b61021e610219366004610f58565b610c31565b6040516100ff929190610f8a565b60008054604051632944908560e01b8152600481018590526024810184905282916001600160a01b0316906329449085906044016040805180830381865afa15801561027c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a09190611025565b915091505b9250929050565b60008060405160200161032490604080825260039082018190527f706c73000000000000000000000000000000000000000000000000000000000060608301526080602083018190528201527f757364000000000000000000000000000000000000000000000000000000000060a082015260c00190565b60408051601f198184030181529082905261034191602001611058565b60408051601f198184030181529190528051602082012090915060008061036e836101606104b0426110b5565b90925090506201518061038182426110b5565b11156103b9576040517f3baab38100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000828060200190518101906103cf91906110c8565b9050670de0b6b3a76400006103e8826305f5e1006110e1565b6103f291906110f8565b9550505050505090565b6060600080600061040d86866109f2565b915091508161043457600060405180602001604052806000815250909350935050506102a5565b61043e86826108ef565b925061044a868461086f565b935050509250929050565b600080546040516377b03e0d60e01b8152600481018490526001600160a01b03909116906377b03e0d90602401602060405180830381865afa15801561049f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c391906110c8565b92915050565b606060008060006104da868661022c565b9150915081610500576040518060200160405280600081525060009350935050506102a5565b6000805460405163ce5e11bf60e01b815260048101899052602481018490526001600160a01b039091169063ce5e11bf90604401602060405180830381865afa158015610551573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057591906110c8565b60005460405163c5958af960e01b8152600481018a9052602481018390529192506001600160a01b03169063c5958af990604401600060405180830381865afa1580156105c6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105ee9190810190611130565b604080516020808201909252600090528151908201209095507fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470146106375792506102a5915050565b604051806020016040528060008152506000945094505050509250929050565b600080546040516377b03e0d60e01b815260048101849052606091839182916001600160a01b0316906377b03e0d90602401602060405180830381865afa1580156106a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ca91906110c8565b9050806000036106f0575050604080516020810190915260008082529250905081610868565b600080546001600160a01b031663ce5e11bf8761070e6001866110b5565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092526024820152604401602060405180830381865afa158015610767573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078b91906110c8565b60005460405163c5958af960e01b815260048101899052602481018390529192506001600160a01b03169063c5958af990604401600060405180830381865afa1580156107dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108049190810190611130565b604080516020808201909252600090528151908201209094507fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47014610850576001945091506108689050565b60408051602081019091526000808252955093509150505b9193909250565b60005460405163c5958af960e01b815260048101849052602481018390526060916001600160a01b03169063c5958af990604401600060405180830381865afa1580156108c0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108e89190810190611130565b9392505050565b6000805460405163ce5e11bf60e01b815260048101859052602481018490526001600160a01b039091169063ce5e11bf90604401602060405180830381865afa158015610940573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e891906110c8565b600080546040517fe07c548600000000000000000000000000000000000000000000000000000000815260048101859052602481018490526001600160a01b039091169063e07c548690604401602060405180830381865afa1580156109ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e891906111dd565b60008054604051632944908560e01b8152600481018590526024810184905282916001600160a01b0316906329449085906044016040805180830381865afa158015610a42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a669190611025565b90925090508115610a7f5780610a7b81611206565b9150505b600080546040516377b03e0d60e01b8152600481018790526001600160a01b03909116906377b03e0d90602401602060405180830381865afa158015610ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aed91906110c8565b9050818111610b035760008092509250506102a5565b6000805460405163ce5e11bf60e01b815260048101889052602481018590526001600160a01b039091169063ce5e11bf90604401602060405180830381865afa158015610b54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7891906110c8565b905084811115610b8d576001935050506102a5565b82610b9781611206565b935050828211610baf576000809350935050506102a5565b60005460405163ce5e11bf60e01b815260048101889052602481018590526001600160a01b039091169063ce5e11bf90604401602060405180830381865afa158015610bff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2391906110c8565b506001935050509250929050565b606080600080610c4588610206888a6110b5565b9150915081610c96576040805160008082526020820190925290610c79565b6060815260200190600190039081610c645790505b506040805160008152602081019091529094509250610e64915050565b6000610ca2898961022c565b909350905082610cf5576040805160008082526020820190925290610cd7565b6060815260200190600190039081610cc25790505b506040805160008152602081019091529095509350610e6492505050565b6000610d0183836110b5565b610d0c90600161121f565b905086811115610d3157610d2087836110b5565b610d2b90600161121f565b92508690505b60008167ffffffffffffffff811115610d4c57610d4c61111a565b604051908082528060200260200182016040528015610d7f57816020015b6060815260200190600190039081610d6a5790505b50905060008267ffffffffffffffff811115610d9d57610d9d61111a565b604051908082528060200260200182016040528015610dc6578160200160208202803683370190505b509050606060005b84811015610e5857610de48e6101e0838a61121f565b838281518110610df657610df6611232565b602002602001018181525050610e258e848381518110610e1857610e18611232565b602002602001015161086f565b915081848281518110610e3a57610e3a611232565b60200260200101819052508080610e5090611206565b915050610dce565b50919750955050505050505b94509492505050565b60008060408385031215610e8057600080fd5b50508035926020909101359150565b60005b83811015610eaa578181015183820152602001610e92565b50506000910152565b60008151808452610ecb816020860160208601610e8f565b601f01601f19169290920160200192915050565b604081526000610ef26040830185610eb3565b90508260208301529392505050565b600060208284031215610f1357600080fd5b5035919050565b8315158152606060208201526000610f356060830185610eb3565b9050826040830152949350505050565b6020815260006108e86020830184610eb3565b60008060008060808587031215610f6e57600080fd5b5050823594602084013594506040840135936060013592509050565b6000604082016040835280855180835260608501915060608160051b8601019250602080880160005b83811015610fe157605f19888703018552610fcf868351610eb3565b95509382019390820190600101610fb3565b50508584038187015286518085528782019482019350915060005b8281101561101857845184529381019392810192600101610ffc565b5091979650505050505050565b6000806040838503121561103857600080fd5b8251801515811461104857600080fd5b6020939093015192949293505050565b60408152600960408201527f53706f745072696365000000000000000000000000000000000000000000000060608201526080602082015260006108e86080830184610eb3565b634e487b7160e01b600052601160045260246000fd5b818103818111156104c3576104c361109f565b6000602082840312156110da57600080fd5b5051919050565b80820281158282048414176104c3576104c361109f565b60008261111557634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561114257600080fd5b815167ffffffffffffffff8082111561115a57600080fd5b818401915084601f83011261116e57600080fd5b8151818111156111805761118061111a565b604051601f8201601f19908116603f011681019083821181831017156111a8576111a861111a565b816040528281528760208487010111156111c157600080fd5b6111d2836020830160208801610e8f565b979650505050505050565b6000602082840312156111ef57600080fd5b81516001600160a01b03811681146108e857600080fd5b6000600182016112185761121861109f565b5060010190565b808201808211156104c3576104c361109f565b634e487b7160e01b600052603260045260246000fdfea264697066735822122075ab984d917be05cdbf9994dd52db42e70cc50f38c9db5da5bb81affa2054f8364736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d45760003560e01c8063adf1639d11610081578063e07c54861161005b578063e07c5486146101e5578063f66f49c3146101f8578063fcd4a5461461020b57600080fd5b8063adf1639d14610190578063c5958af9146101b2578063ce5e11bf146101d257600080fd5b806377b03e0d116100b257806377b03e0d1461013f578063a792765f14610152578063a95c372d1461016557600080fd5b806329449085146100d957806350d25bcd1461010857806364ee3c6d1461011e575b600080fd5b6100ec6100e7366004610e6d565b61022c565b6040805192151583526020830191909152015b60405180910390f35b6101106102ac565b6040519081526020016100ff565b61013161012c366004610e6d565b6103fc565b6040516100ff929190610edf565b61011061014d366004610f01565b610455565b610131610160366004610e6d565b6104c9565b600054610178906001600160a01b031681565b6040516001600160a01b0390911681526020016100ff565b6101a361019e366004610f01565b610657565b6040516100ff93929190610f1a565b6101c56101c0366004610e6d565b61086f565b6040516100ff9190610f45565b6101106101e0366004610e6d565b6108ef565b6101786101f3366004610e6d565b610964565b6100ec610206366004610e6d565b6109f2565b61021e610219366004610f58565b610c31565b6040516100ff929190610f8a565b60008054604051632944908560e01b8152600481018590526024810184905282916001600160a01b0316906329449085906044016040805180830381865afa15801561027c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a09190611025565b915091505b9250929050565b60008060405160200161032490604080825260039082018190527f706c73000000000000000000000000000000000000000000000000000000000060608301526080602083018190528201527f757364000000000000000000000000000000000000000000000000000000000060a082015260c00190565b60408051601f198184030181529082905261034191602001611058565b60408051601f198184030181529190528051602082012090915060008061036e836101606104b0426110b5565b90925090506201518061038182426110b5565b11156103b9576040517f3baab38100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000828060200190518101906103cf91906110c8565b9050670de0b6b3a76400006103e8826305f5e1006110e1565b6103f291906110f8565b9550505050505090565b6060600080600061040d86866109f2565b915091508161043457600060405180602001604052806000815250909350935050506102a5565b61043e86826108ef565b925061044a868461086f565b935050509250929050565b600080546040516377b03e0d60e01b8152600481018490526001600160a01b03909116906377b03e0d90602401602060405180830381865afa15801561049f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c391906110c8565b92915050565b606060008060006104da868661022c565b9150915081610500576040518060200160405280600081525060009350935050506102a5565b6000805460405163ce5e11bf60e01b815260048101899052602481018490526001600160a01b039091169063ce5e11bf90604401602060405180830381865afa158015610551573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057591906110c8565b60005460405163c5958af960e01b8152600481018a9052602481018390529192506001600160a01b03169063c5958af990604401600060405180830381865afa1580156105c6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105ee9190810190611130565b604080516020808201909252600090528151908201209095507fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470146106375792506102a5915050565b604051806020016040528060008152506000945094505050509250929050565b600080546040516377b03e0d60e01b815260048101849052606091839182916001600160a01b0316906377b03e0d90602401602060405180830381865afa1580156106a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ca91906110c8565b9050806000036106f0575050604080516020810190915260008082529250905081610868565b600080546001600160a01b031663ce5e11bf8761070e6001866110b5565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092526024820152604401602060405180830381865afa158015610767573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078b91906110c8565b60005460405163c5958af960e01b815260048101899052602481018390529192506001600160a01b03169063c5958af990604401600060405180830381865afa1580156107dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108049190810190611130565b604080516020808201909252600090528151908201209094507fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47014610850576001945091506108689050565b60408051602081019091526000808252955093509150505b9193909250565b60005460405163c5958af960e01b815260048101849052602481018390526060916001600160a01b03169063c5958af990604401600060405180830381865afa1580156108c0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108e89190810190611130565b9392505050565b6000805460405163ce5e11bf60e01b815260048101859052602481018490526001600160a01b039091169063ce5e11bf90604401602060405180830381865afa158015610940573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e891906110c8565b600080546040517fe07c548600000000000000000000000000000000000000000000000000000000815260048101859052602481018490526001600160a01b039091169063e07c548690604401602060405180830381865afa1580156109ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e891906111dd565b60008054604051632944908560e01b8152600481018590526024810184905282916001600160a01b0316906329449085906044016040805180830381865afa158015610a42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a669190611025565b90925090508115610a7f5780610a7b81611206565b9150505b600080546040516377b03e0d60e01b8152600481018790526001600160a01b03909116906377b03e0d90602401602060405180830381865afa158015610ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aed91906110c8565b9050818111610b035760008092509250506102a5565b6000805460405163ce5e11bf60e01b815260048101889052602481018590526001600160a01b039091169063ce5e11bf90604401602060405180830381865afa158015610b54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7891906110c8565b905084811115610b8d576001935050506102a5565b82610b9781611206565b935050828211610baf576000809350935050506102a5565b60005460405163ce5e11bf60e01b815260048101889052602481018590526001600160a01b039091169063ce5e11bf90604401602060405180830381865afa158015610bff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2391906110c8565b506001935050509250929050565b606080600080610c4588610206888a6110b5565b9150915081610c96576040805160008082526020820190925290610c79565b6060815260200190600190039081610c645790505b506040805160008152602081019091529094509250610e64915050565b6000610ca2898961022c565b909350905082610cf5576040805160008082526020820190925290610cd7565b6060815260200190600190039081610cc25790505b506040805160008152602081019091529095509350610e6492505050565b6000610d0183836110b5565b610d0c90600161121f565b905086811115610d3157610d2087836110b5565b610d2b90600161121f565b92508690505b60008167ffffffffffffffff811115610d4c57610d4c61111a565b604051908082528060200260200182016040528015610d7f57816020015b6060815260200190600190039081610d6a5790505b50905060008267ffffffffffffffff811115610d9d57610d9d61111a565b604051908082528060200260200182016040528015610dc6578160200160208202803683370190505b509050606060005b84811015610e5857610de48e6101e0838a61121f565b838281518110610df657610df6611232565b602002602001018181525050610e258e848381518110610e1857610e18611232565b602002602001015161086f565b915081848281518110610e3a57610e3a611232565b60200260200101819052508080610e5090611206565b915050610dce565b50919750955050505050505b94509492505050565b60008060408385031215610e8057600080fd5b50508035926020909101359150565b60005b83811015610eaa578181015183820152602001610e92565b50506000910152565b60008151808452610ecb816020860160208601610e8f565b601f01601f19169290920160200192915050565b604081526000610ef26040830185610eb3565b90508260208301529392505050565b600060208284031215610f1357600080fd5b5035919050565b8315158152606060208201526000610f356060830185610eb3565b9050826040830152949350505050565b6020815260006108e86020830184610eb3565b60008060008060808587031215610f6e57600080fd5b5050823594602084013594506040840135936060013592509050565b6000604082016040835280855180835260608501915060608160051b8601019250602080880160005b83811015610fe157605f19888703018552610fcf868351610eb3565b95509382019390820190600101610fb3565b50508584038187015286518085528782019482019350915060005b8281101561101857845184529381019392810192600101610ffc565b5091979650505050505050565b6000806040838503121561103857600080fd5b8251801515811461104857600080fd5b6020939093015192949293505050565b60408152600960408201527f53706f745072696365000000000000000000000000000000000000000000000060608201526080602082015260006108e86080830184610eb3565b634e487b7160e01b600052601160045260246000fd5b818103818111156104c3576104c361109f565b6000602082840312156110da57600080fd5b5051919050565b80820281158282048414176104c3576104c361109f565b60008261111557634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561114257600080fd5b815167ffffffffffffffff8082111561115a57600080fd5b818401915084601f83011261116e57600080fd5b8151818111156111805761118061111a565b604051601f8201601f19908116603f011681019083821181831017156111a8576111a861111a565b816040528281528760208487010111156111c157600080fd5b6111d2836020830160208801610e8f565b979650505050505050565b6000602082840312156111ef57600080fd5b81516001600160a01b03811681146108e857600080fd5b6000600182016112185761121861109f565b5060010190565b808201808211156104c3576104c361109f565b634e487b7160e01b600052603260045260246000fdfea264697066735822122075ab984d917be05cdbf9994dd52db42e70cc50f38c9db5da5bb81affa2054f8364736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getCurrentValue(bytes32)": {
        "details": "Allows the user to get the latest value for the queryId specified",
        "params": {
          "_queryId": "is the id to look up the value for"
        },
        "returns": {
          "_ifRetrieve": "bool true if non-zero value successfully retrieved",
          "_timestampRetrieved": "the retrieved value's timestamp",
          "_value": "the value retrieved"
        }
      },
      "getDataAfter(bytes32,uint256)": {
        "details": "Retrieves the next value for the queryId after the specified timestamp",
        "params": {
          "_queryId": "is the queryId to look up the value for",
          "_timestamp": "after which to search for next value"
        },
        "returns": {
          "_timestampRetrieved": "the value's timestamp",
          "_value": "the value retrieved"
        }
      },
      "getDataBefore(bytes32,uint256)": {
        "details": "Retrieves the latest value for the queryId before the specified timestamp",
        "params": {
          "_queryId": "is the queryId to look up the value for",
          "_timestamp": "before which to search for latest value"
        },
        "returns": {
          "_timestampRetrieved": "the value's timestamp",
          "_value": "the value retrieved"
        }
      },
      "getIndexForDataAfter(bytes32,uint256)": {
        "details": "Retrieves next array index of data after the specified timestamp for the queryId",
        "params": {
          "_queryId": "is the queryId to look up the index for",
          "_timestamp": "is the timestamp after which to search for the next index"
        },
        "returns": {
          "_found": "whether the index was found",
          "_index": "the next index found after the specified timestamp"
        }
      },
      "getIndexForDataBefore(bytes32,uint256)": {
        "details": "Retrieves latest array index of data before the specified timestamp for the queryId",
        "params": {
          "_queryId": "is the queryId to look up the index for",
          "_timestamp": "is the timestamp before which to search for the latest index"
        },
        "returns": {
          "_found": "whether the index was found",
          "_index": "the latest index found before the specified timestamp"
        }
      },
      "getMultipleValuesBefore(bytes32,uint256,uint256,uint256)": {
        "details": "Retrieves multiple uint256 values before the specified timestamp",
        "params": {
          "_maxAge": "the maximum number of seconds before the _timestamp to search for values",
          "_maxCount": "the maximum number of values to return",
          "_queryId": "the unique id of the data query",
          "_timestamp": "the timestamp before which to search for values"
        },
        "returns": {
          "_timestamps": "the timestamps of the values retrieved",
          "_values": "the values retrieved, ordered from oldest to newest"
        }
      },
      "getNewValueCountbyQueryId(bytes32)": {
        "details": "Counts the number of values that have been submitted for the queryId",
        "params": {
          "_queryId": "the id to look up"
        },
        "returns": {
          "_0": "uint256 count of the number of values received for the queryId"
        }
      },
      "getReporterByTimestamp(bytes32,uint256)": {
        "details": "Returns the address of the reporter who submitted a value for a data ID at a specific time",
        "params": {
          "_queryId": "is ID of the specific data feed",
          "_timestamp": "is the timestamp to find a corresponding reporter for"
        },
        "returns": {
          "_0": "address of the reporter who reported the value for the data ID at the given timestamp"
        }
      },
      "getTimestampbyQueryIdandIndex(bytes32,uint256)": {
        "details": "Gets the timestamp for the value based on their index",
        "params": {
          "_index": "is the value index to look up",
          "_queryId": "is the id to look up"
        },
        "returns": {
          "_0": "uint256 timestamp"
        }
      },
      "retrieveData(bytes32,uint256)": {
        "details": "Retrieve value from oracle based on queryId/timestamp",
        "params": {
          "_queryId": "being requested",
          "_timestamp": "to retrieve data/value from"
        },
        "returns": {
          "_0": "bytes value for query/timestamp submitted"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 886,
        "contract": "contracts/fetchflex-oracle/FetchFlexOracle.sol:FetchFlexOracle",
        "label": "fetch",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IFetch)879"
      }
    ],
    "types": {
      "t_contract(IFetch)879": {
        "encoding": "inplace",
        "label": "contract IFetch",
        "numberOfBytes": "20"
      }
    }
  }
}