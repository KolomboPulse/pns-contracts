const { ethers } = require('hardhat')

async function main() {
  // const ethRegistrar = await ethers.getContractAt(
  //   'ETHRegistrarController',
  //   '0x9dab287FbE7C3CbaEEd7884E0D840d44aDDc98aE',
  // )
  // await ethRegistrar.register(
  //   {
  //     name: 'johnny',
  //     owner: '0xF7cC551106A1f4E2843A3DA0C477B6f77FA4a09d',
  //     duration: 63072000,
  //     secret:
  //       '0xf68323206a35533770c590bb8d2a1be91f00159c7d895b3bd491b242856806a1',
  //     resolver: '0xaC16414782d31cD4395b7C5a2dfDfc1a61017D81',
  //     data: [
  //       '0x8b95dd71744c588bd8c69be23ab9ebf7cf97560479ce13b23c563b285c51b6132a5c20c1000000000000000000000000000000000000000000000000000000000000017100000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000014f7cc551106a1f4e2843a3da0c477b6f77fa4a09d000000000000000000000000',
  //     ],
  //     reverseRecord: true,
  //     ownerControlledFuses: 0,
  //     referrer: '0x0000000000000000000000000000000000000000',
  //   },
  //   {
  //     value: '0x2386f26fc12ba0',
  //   },
  // )

  const interface = new ethers.utils.Interface(
    require('../deployments/testnet/ETHRegistrarController.json').abi,
  )
  const decoded = interface.parseTransaction({
    data: '0x27302d6a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000120000000000000000000000000ede3885b7e70f0d88cd3ed1ef956407e7b3030770000000000000000000000000000000000000000000000000000000001e13380366c63db5c28ad9a29310bfa221a26ded412174def497a23ffa6f4af47066532000000000000000000000000ac16414782d31cd4395b7c5a2dfdfc1a61017d81000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f7cc551106a1f4e2843a3da0c477b6f77fa4a09d000000000000000000000000000000000000000000000000000000000000000e6832f09fa5b3f09fa5b3f09fa5b300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000e410f13a8c0680cd7be04fa553b6de47e5e49f568b380e624f18c99e69c49fae79fb90f559000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000b6465736372697074696f6e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d5465737420726566657272616c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a48b95dd710680cd7be04fa553b6de47e5e49f568b380e624f18c99e69c49fae79fb90f559000000000000000000000000000000000000000000000000000000000000017100000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000014ede3885b7e70f0d88cd3ed1ef956407e7b30307700000000000000000000000000000000000000000000000000000000000000000000000000000000',
  })
  console.log('decoded', decoded)
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error)
    process.exit(1)
  })
